

<#0>1. shell脚本
脚本：新华词典解释――表演戏剧、曲艺，摄制电影等所依据的本子，
	里面记载台词、故事情节等。



脚本文件――剧本
解析器――演员
python，js，lua，php所有脚本语言都需要解释器。脚本不需要编译，因为脚本根本不是程序，解释器才是程序！
脚本只是我们让解释器做的事情。

脚本的解析器负责解析运行脚本

shell脚本的定位就是在linux下执行一些命令。

编译型语言是将代码翻译成机器码，要给计算机看！
解释型语言（脚本语言）不需要翻译，直接给解释器看！解释器就是一个程序，
解释器是一个自己都不知道自己该干什么的程序，当我们将编写好的脚本给解
释器看的时候，解释器才知道自己该干什么。

1）编译型语言
c 语言   
c++ 
特点：先编译，再执行。如果程序出现错误，必须将错误改正。编译通过，才可以执行。


2）解释型语言
JavaScript  
python
shell    

特点：有一句执行一句。如果有某句话有问题，这句代码不影响其他语句继续执行。解释型语言不需要编译。
对比：编译型语言逻辑更加严谨，适合进行逻辑处理，效率更高。



shell脚本的定位：在linux下批处理命令的脚本语言
<#1>实现一个shell脚本
	1 vim ex1.sh   创建脚本文件
	2 
		#! /bin/bash  指定使用的解释器，当计算机中有多个解释器的时候，必须要指定
		date					date是一条命令，能够输出当前的日期
		echo "I am going to create dir aaaa"  echo输出字符串
		mkdir aaaa   #创建文件夹 aaaa
		cd aaaa				进入文件夹 aaaa中
		echo "I am going to create file a.txt"
		touch a.txt  创建文件a.txt
		
		一下3 4步需要保存并退出文件
	3 chmod +x ex1.sh	#给ex1.sh增加执行权限
	4 ./ex1.sh

	shell中的注释
	# shell脚本中用#来注释

	脚本的开头
	#! /bin/bash      功能是告诉此脚本用/bin/bash 解释器来执行此脚本

	bash 是 shell脚本的解释器

	执行shell脚本
	
	(1) chmod +x ex1.sh
	  ./ex1.sh

	(2) bash ex1.sh

<#1>定义变量
	
<#2>脚本里面可以定义变量，可以使用环境变量

###############案例代码##################

NAME=mu  #shell 脚本中变量没有类型，全是字符串，不需要先定义
echo $NAME	$变量名  是对变量进行读操作
echo "name is $NAME"	# " " 不完全输出，如果" "中间有变量，输出变量值
echo 'name is $NAME'	# ' ' 完全输出，如果' '中间有变量，输出变量名
echo "path is $PATH"


1) shell中变量尽量大写(默认规则)
2) =  两边一定不要加空格
3) 变量全是字符串

<#2>系统预设变量 
$0, $1, $2, $3 ...$9 $# $? $*

echo "0 is $0"
echo "1 is $1"
echo "2 is $2"
echo "3 is $3"
echo "num is $#"

$0 ---> 是脚本名称
$1 ---> 第1个参数
$2 ---> 第2个参数
...
$#  参数个数

$*  表示所有的参数，以空格隔开

$?  保存了上一个命令的执行结果(用来判断下一个命令是否执行) 
	(0 表示执行成功，   非0    表示执行失败， 不同的数字表示不同的失败原因)


我们如果自己写脚本，可能需要参数，如何提取参数，就用$0, $1, $2

练习1
	这道题要写脚本
  从参数(运行脚本时传递的参数)里面读出文件夹名称，文件名
	根据文件夹名（参数1）创建一个文件夹
	进入文件夹
	在文件夹中创建文件 (参数2)  

	
	每组倒数第二个人，如果没有电脑，倒数第三个，依次类推
	

<#1>怎么实现输入(类似于scanf) read
			
read NAME		//等待输入，一旦用户有输入，值放到NAME变量中
echo "name is $NAME"

#可不可以先输出，再输入
read -p "please input name:" NAME		# -p 表示先输出再输入
echo "name is $NAME"


###############练习##################
用read
先让用户输入文件夹名，创建文件夹，然后让用户输入文件名，
在刚才创建的文件夹里创建文件

这道题需要有两个输入，分别是文件夹名和文件名

每组第三个人做  如果没有电脑就第四个



<#1>算术运算命令
	
脚本支持 (+) (-) (\*) (/) (%)  shell脚本中没有小数

expr 3 + 5     ==== 8   #运算符两边加空格
expr 3 \* 2    ==== 6
expr 3 % 2     ==== 1
expr 3 / 2     ==== 1

expr 在shell编程中，专门用来做算术运算
如果想保存计算结果，先定义一个变量

NUM1=`expr 3 + 5`               //` ` 不是单引号是esc 下面的符号 `  ` 作用是取出输出的值
NUM2=`expr 3 \* 5`
NUM3=`expr $NUM1 + $NUM2`
echo "num1 $NUM1"
echo "num2 $NUM2"
echo "num3 $NUM3"

DATE=`date`		#date 名会输出当前日期，加 ` `, 就会将输出信息给变量DATE

<#1>逻辑表达式

<#2>判断两个字符串是否相等
[ $name == "yang" ]   #注意 == 两边一定要有空格 []前后也要有空格

逻辑表达式通常和if 组合使用

if 条件语句

##########################################
read -p "please input name: " NAME
if [ $NAME == "xiaoli" ] 
then
	echo "you input is xiaoli"
else
	echo "you input is not xiaoli"
fi



<#2>判断一个整数是不是大于另一个整数
		
-eq 判断两个数是不是相等   equal  ==
-gt 判断一个数是不是大于另一个数   greater than  >
-lt 判断一个数是不是小于另一个数	 little than   <

输入一个数，判断这个数是不是 > 60

##############################例子代码##################################

输入一个数，判断这个数是不是 > 60
read -p "please input a num: " NUM
if [ $NUM -gt 60 ]                     #不可以写  > 
then
	echo "input > 60"
else
	echo "input < 60"
fi



<#2>判断文件存不存在
		
-e $FILE    # -e 判断文件是否存在  exist
-d 判断文件是不是一个目录	      	  directory
-f 判断此文件是不是普通文件(文本文件， 可执行文件)  file
-x 判断此文件是否有执行权限	   execute
-r 判断此文件是否有读权限		   read
-w 判断此文件是否有写权限		   write

##############################例子代码##################################
read -p "please input file name: " NAME
if [ -e $NAME ]
then
	echo "file exist"
else
	echo "file not exist"
fi



<#2>shell 的与或非

#! /bin/bash

NAME=farsight
AGE=1

if [ $NAME == farsight -a $AGE == 1 ]  #-o或 ！非
then
	echo "yes"
elif [ $NAME == hello ]
then
	echo "yes too"
else
	echo "no"
fi

练习：

1.			
先让用户输入文件夹名，创建文件夹，然后让用户输入文件名，
在刚才创建的文件夹里创建文件，
1如果目录存在，不创建，
2如果目录无写权限，不创建文件
3如果文件存在，不创建


2.
由用户输入一个文件名aaaa( aaaa是可变的 )
如果文件是目录，就打印"aaaa is 目录"  (aaaa是可变的)
如果文件是普通文件就打印"aaaa is 普通文件"


3.实现输入一个数字，判断此数字是不是偶数




<#0>循环
<#1>1.for 循环

循环
for 变量名 in 单词表
do   

done 

##############################例子代码##################################

LIST="yang li liu wang zhang"
for NAME in $LIST
do
	echo $NAME
done

################################练习###############################

1. 用for循环实现创建（文件或文件夹）a.1, a.2,  a.3, a.4 ...a.8
	LIST="1 2 3 4 5 6 7 8"

	每组第一个同学做
		
		
		
			
		
2. for循环实现将aaaa文件夹中的所有文件copy到bbbb中(不用cp -r  可以用cp)
	ls获得文件夹下的文件单词表 `ls aaaa`
	已知咱们事先有一个aaaa文件夹，aaaa文件夹中还有一些文件。我们事先还有bbbb文件夹。
	将aaaa文件夹中的内容用脚本拷贝到bbbb中。
	
	这道题使用for循环做，截图 代码和结果（给我看aaaa和bbbb中的内容）
	aaaa文件夹是现成的，已经存在的，不用脚本中创建
注意：使用相对路径的时候，一定要搞清楚现在的位置


如果哪组同学不在上课之前和我打招呼，不然就算没做完.
第二个同学做




<#1>2. while  循环

1 + 2 + 3 + 4 + 5 + 6 +... + 100


I=1
SUM=0
while [ $I -lt 101 ]
do
	SUM=`expr $SUM + $I`
	I=`expr $I + 1`	
done
echo $SUM

################################练习###############################
在脚本中创建一个文件夹tmpdir,然后用一个while循环，
在tmpdir里分别创建tmp.1, tmp.2, tmp.3, tmp.4, tmp.5, 
		tmp.6, tmp.7,tmp.8文件 







<#2>2.1 break   ///结束循环
示例1：
要实现加到90结束

i=1
sum=0
while [ $i -lt 101 ]
do
	if [ $i -eq 91 ]
	then
		break 1		#shell编程支持结束多重循环， break 2 结束2重循环
	fi
	sum=`expr $sum + $i`
	i=`expr $i + 1`	
done
echo $sum

示例2：
#! /bin/bash
这里例子没有什么实际的逻辑意义，就是为了演示break能跳出多重循环
I=1
J=0
SUM=0
while [ $J -lt 2 ]
do
	I=0
	while [ $I -lt 101 ]
	do 
		if [ $I -eq 91 ]
		then
			echo "要执行 break了"
			break 2
		fi
		SUM=`expr $SUM + $I`
		I=`expr $I + 1`
	done
	echo $SUM
	J=`expr $J + 1`
done
echo "到这里了"

<#1>3. case 语句：(多条件分支)
可以判断任意输入，但是*)必须放在最后

read -p "please input num: " NUM
case $NUM in
1)
	echo "monday"
	;;		#相当于break, 结束switch 语句
2)
	echo "tuesday"
	;;
3)
	echo "wensday"
	;;
*)			#相当于default
	echo "input error"
	;;
esac
################################练习###############################
试着写一个计算器 + - \* /   乘号输入的时候可以是X

输入两个操作数和一个运算符
输入num1:
输入运算符:
输入num2：