误区：有人喜欢计算变量位运算之后的值！这是完全没有意义的！



位运算: 使用位运算的时候一定不是我们想做四则运算，一定是想对变量的指定的位运算。所以对于位运算我们如果去计算结果
	是没有意义的！

& | ^ ~ << >>


& 按位与：置零；读取位的值
置零示例：
x = 1011 0101 将这个数的4号位置0，其他位的值是不能变的
x &= ~(1<<4) 等价 x = x&~(1<<4)

1  0000 0001
1<<4   0001 0000
~(1<<4) 1110 1111

1011 0101
1110 1111
----------
1010 0101

读取示例：
x = 1011 0101  读取这个数的4号位的值
if((x & 1<<4) == 0)
{
	//x的4号位是0
}
else
{
	//x的4号位是1   x & 1<<4 的值不是0 就一定是1吗？可不可以这个写 if((x & 1<<4) == 1)？不可以！！！
}

1011 0101
0001 0000
---------
0001 0000 


| 按位或：置1  算法：相同的位上有一个为1就是1
x = 1011 0101  将这个数的3号位置1
x |= 1<<3
1011 0101
0000 1000  |  
----------
1011 1101


^ 按位异或: 给指定的位取反    相同的位上值相同为0，值不同为1
x = 1011 0101 将它的3号位取反
x ^= 1<<3

1011 0101
0000 1000
----------
1011 1101
0000 1000
----------
1011 0101

~ 按位取反: 给所有的位取反   ！逻辑取反，将真的变假 ，假的变真; ~很有可能变来变去都是真的
x = 1011 0101
~x
1011 0101
0100 1010




全世界写数字，都是把数字的高位写在左边


<< 左移 ： 向数据的高位移，高位溢出，低位补0
x = 1011 0101
x<<3
1010 1000

>> 右移 : 向数据低位移，低位溢出，如果是有符号的数高位补符号位，如果是无符号的数，高位补0。
	
	对于单片机的寄存器操作，我们使用的都是无符号的数。
	位运算绝大部分情况下都是对无符号的数进行运算。